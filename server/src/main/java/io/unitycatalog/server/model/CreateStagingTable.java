/*
 * Unity Catalog API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.unitycatalog.server.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateStagingTable
 */
@JsonPropertyOrder({
  CreateStagingTable.JSON_PROPERTY_NAME,
  CreateStagingTable.JSON_PROPERTY_CATALOG_NAME,
  CreateStagingTable.JSON_PROPERTY_SCHEMA_NAME,
  CreateStagingTable.JSON_PROPERTY_STAGING_LOCATION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class CreateStagingTable {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CATALOG_NAME = "catalog_name";
  private String catalogName;

  public static final String JSON_PROPERTY_SCHEMA_NAME = "schema_name";
  private String schemaName;

  public static final String JSON_PROPERTY_STAGING_LOCATION = "staging_location";
  private String stagingLocation;

  public CreateStagingTable() {
  }

  public CreateStagingTable name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of table, relative to parent schema.
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public CreateStagingTable catalogName(String catalogName) {
    
    this.catalogName = catalogName;
    return this;
  }

   /**
   * Name of parent catalog.
   * @return catalogName
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CATALOG_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCatalogName() {
    return catalogName;
  }


  @JsonProperty(JSON_PROPERTY_CATALOG_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCatalogName(String catalogName) {
    this.catalogName = catalogName;
  }


  public CreateStagingTable schemaName(String schemaName) {
    
    this.schemaName = schemaName;
    return this;
  }

   /**
   * Name of parent schema relative to its parent catalog.
   * @return schemaName
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SCHEMA_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSchemaName() {
    return schemaName;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public CreateStagingTable stagingLocation(String stagingLocation) {
    
    this.stagingLocation = stagingLocation;
    return this;
  }

   /**
   * URI generated for the staging table
   * @return stagingLocation
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STAGING_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStagingLocation() {
    return stagingLocation;
  }


  @JsonProperty(JSON_PROPERTY_STAGING_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStagingLocation(String stagingLocation) {
    this.stagingLocation = stagingLocation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateStagingTable createStagingTable = (CreateStagingTable) o;
    return Objects.equals(this.name, createStagingTable.name) &&
        Objects.equals(this.catalogName, createStagingTable.catalogName) &&
        Objects.equals(this.schemaName, createStagingTable.schemaName) &&
        Objects.equals(this.stagingLocation, createStagingTable.stagingLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, catalogName, schemaName, stagingLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateStagingTable {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    catalogName: ").append(toIndentedString(catalogName)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    stagingLocation: ").append(toIndentedString(stagingLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

